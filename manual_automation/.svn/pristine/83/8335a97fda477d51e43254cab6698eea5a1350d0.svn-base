package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.dangdang.client.DBAction;
import com.dangdang.data.BlackListQuery;
import com.dangdang.data.VerticalSearchQuery;
import com.dangdang.verifier.blacklist.ListRankingBlackListVerifier;
import com.dangdang.verifier.blacklist.SearchRankingBlackListVerifier;
import com.dangdang.verifier.iVerifier.IVerticalSearchVerifer;
import com.dangdang.verifier.verticalSearch.ClothVSVerifier;
import com.dangdang.verifier.verticalSearch.PubVSVerifier;

public class BlackListScheduler {
	private static Logger logger = Logger.getLogger(BlackListScheduler.class);
	{
		PropertyConfigurator.configure("conf/blacklist_log4j.properties");
	}

	@BeforeMethod
	public void setup() {
	}

	@AfterMethod
	public void clearup() {
	}

	// List黑名单过滤
	@Test(enabled = true)
	public void ListRankingBlackList() {
		try {
			long d = System.currentTimeMillis();
			logger.fatal(d);
			DBAction dba = new DBAction();
			dba.setVsq_condition(" 1=1 and um = 'list_ranking'");
			List<BlackListQuery> listRankingQueryList = dba.getBlackListQuery();
			ListRankingBlackListVerifier listRankingVerifier = new ListRankingBlackListVerifier();
			int pass = 0, fail = 0;
			for (BlackListQuery category : listRankingQueryList) {
				try {
					if (listRankingVerifier.doVerify(category)) {
						logger.fatal(" - [PASSED] - " + "list_ranking blacklist filer for:" + category.getQuery());
						pass++;
					} else {
						logger.fatal(" - [FAILED] - " + "list_ranking blacklist filer for:" + category.getQuery());
						fail++;
					}
				} catch (Exception e) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					e.printStackTrace(new PrintStream(baos));
					String exception = baos.toString();
					logger.error(" - [LOG_EXCEPTION] - " + exception);
					fail++;
				}
			}
			logger.fatal("Result  ####    Passed Count:" + pass + " Failed Count:" + fail);
			double pr = Double.valueOf(pass) / (pass + fail) * 100;
			double fr = Double.valueOf(fail) / (fail + pass) * 100;
			logger.fatal("Result  ####    Passed Rate:" + Math.round(pr) + "% Failed Rate:" + Math.round(fr) + "%");

			long d2 = System.currentTimeMillis();
			logger.fatal("总耗时：" + (d2 - d) / 1000.0 + "秒");
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			e.printStackTrace(new PrintStream(baos));
			String exception = baos.toString();
			logger.error(" - [LOG_EXCEPTION] - " + exception);
			e.printStackTrace();
		} finally {
		}
	}

	// Search黑名单过滤
	@Test(enabled = true)
	public void SearchRankingBlackList() {
		try {
			long d = System.currentTimeMillis();
			logger.fatal(d);
			DBAction dba = new DBAction();
			dba.setVsq_condition(" 1=1 and um = 'search_ranking'");
			List<BlackListQuery> searchRankingQueryList = dba.getBlackListQuery();
			SearchRankingBlackListVerifier searchRankingVerifier = new SearchRankingBlackListVerifier();
			int pass = 0, fail = 0;
			for (BlackListQuery query : searchRankingQueryList) {
				try {
					if (searchRankingVerifier.doVerify(query)) {
						logger.fatal(" - [PASSED] - " + "search_ranking blacklist filer for:" + query.getQuery());
						pass++;
					} else {
						logger.fatal(" - [FAILED] - " + "search_ranking blacklist filer for:" + query.getQuery());
						fail++;
					}
				} catch (Exception e) {
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					e.printStackTrace(new PrintStream(baos));
					String exception = baos.toString();
					logger.error(" - [LOG_EXCEPTION] - " + exception);
					fail++;
				}
			}
			logger.fatal("Result  ####    Passed Count:" + pass + " Failed Count:" + fail);
			double pr = Double.valueOf(pass) / (pass + fail) * 100;
			double fr = Double.valueOf(fail) / (fail + pass) * 100;
			logger.fatal("Result  ####    Passed Rate:" + Math.round(pr) + "% Failed Rate:" + Math.round(fr) + "%");

			long d2 = System.currentTimeMillis();
			logger.fatal("总耗时：" + (d2 - d) / 1000.0 + "秒");
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			e.printStackTrace(new PrintStream(baos));
			String exception = baos.toString();
			logger.error(" - [LOG_EXCEPTION] - " + exception);
			e.printStackTrace();
		} finally {
		}
	}

}
