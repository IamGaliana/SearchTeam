package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.slf4j.LoggerFactory;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.dangdang.client.SearchRequester;
import com.dangdang.client.URLBuilder;
import com.dangdang.util.XMLParser;

/**
 * @author gaoyanjun@dangdang.com
 * @version 
 */
public class IndexModifyScheduler {
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(IndexModifyScheduler.class);

	private static String ProductID = "0";
	
	@BeforeMethod
	public void setup() {
	}

	@AfterMethod
	public void clearup() {
	}


	@Test(enabled = true, groups = "p2")
	public void NormalIndexModify() throws MalformedURLException, DocumentException {
		boolean isPass = true;
		boolean addSuccess = false;
		boolean modifySuccess = false;
		
		// 随机造一个不存在的pid
		Random random = new Random();
		int randomPID = random.nextInt(Integer.MAX_VALUE);
		
		// 初始字段
		String pid = Integer.toString(randomPID);
		String product_name = "normal_add_into_index";
		String display_status = "0";
		String num_images = "5";
		String stock_status = "1";
		String exclusive_end_date = "2015-08-04 12:00:00";
		
		// 修改字段
		String modified_display_status = "1";
		String modified_num_images = "7";
		String modified_end_date = "2015-09-04 12:00:00";
		String modified_product_name = "modified_product_name";
		
		// 获取指定模块的fulltm和incnum
		Map<String, String> FulltmAndIncNum = new HashMap<String, String>();
		
		// 确定单品在索引中不存在
		List<Node> PidNode = URLBuilder.porductSearch(pid, false);		
		
		// 新增一个品到索引中，然后修改
		if(PidNode.isEmpty()){	
			// 新增
			ProductID = pid;			
			Map<String, String> paramMap = new HashMap<String, String>();
			paramMap.put("product_id", pid);
			paramMap.put("product_name", product_name);			
			paramMap.put("display_status", display_status);
			paramMap.put("num_images", num_images);
			paramMap.put("stock_status", stock_status);
			paramMap.put("exclusive_end_date", exclusive_end_date);
			paramMap.put("_index_add", "1");
			FulltmAndIncNum = IndexDataHandler.GetFulltmAndIncNum("searcher");
			paramMap.putAll(FulltmAndIncNum);
			
			String url = URLBuilder.buildUrl(paramMap);
			url = url.replaceAll(" ", "%20");
			String ret = SearchRequester.get(url);
			if(ret.contains("OK")){
				addSuccess = true;
				logger.info("add pid [" + pid + "] into index successfully");
			}else
				logger.error("add pid [" + pid + "] into index failed!");
			
			// 确认新增成功
			if(addSuccess){
				List<Node> newPidNode = URLBuilder.porductSearch(pid, false);
				if(newPidNode.isEmpty())
					logger.error("did not find pid [" + pid + "] in index!");
			}
			
			// 修改						
			Map<String, String> paramModified = new HashMap<String, String>();
			paramModified.put("product_id", pid);
			// int型
			paramModified.put("_modify_display_status", modified_display_status);
			// int型
			paramModified.put("_modify_num_images", modified_num_images);
			// date 型			
			paramModified.put("_modify_exclusive_end_date", modified_end_date);
			// string 型
			paramModified.put("_modify_product_name", modified_product_name);
			paramModified.put("_index_modify", "1");
			FulltmAndIncNum = IndexDataHandler.GetFulltmAndIncNum("searcher");
			paramModified.putAll(FulltmAndIncNum);
			
			String modifiedUrl = URLBuilder.buildUrl(paramModified);
			modifiedUrl = modifiedUrl.replaceAll(" ", "%20");
			String modifiedRet = SearchRequester.get(modifiedUrl);
			if(modifiedRet.contains("OK")){
				modifySuccess = true;
				logger.info("modify pid [" + pid + "] successfully");
			}else
				logger.error("modify pid [" + pid + "] failed!");
			
		}else{
			// 随机生成的pid如果在索引中已经存在，就返回重新执行改方法
			// 为了不重复执行验证方法，直接return
			NormalIndexModify();
			return;
		}
		
		// 验证
		if(modifySuccess){
			List<Node> modifiedPidNode = URLBuilder.porductSearch(pid, false);
			if(modifiedPidNode.isEmpty()){
				logger.error("did not find pid [" + pid + "] in index!");
			}else{
				String newPid = XMLParser.product_id(modifiedPidNode.get(0));
				String newDisplayStatus = XMLParser.product_displayStatus(modifiedPidNode.get(0));
				String newNumImages = XMLParser.product_numImage(modifiedPidNode.get(0));
				String newEndDate =   XMLParser.product_exclusive_end_date(modifiedPidNode.get(0));
				String newProductName =   XMLParser.product_name(modifiedPidNode.get(0));				
								
				if(newPid.equals(pid) && 
						newDisplayStatus.equals(modified_display_status) &&
						newNumImages.equals(modified_num_images) && 
						newEndDate.equals(modified_end_date) &&
						newProductName.equals(modified_product_name)){
					logger.info("find pid [" + pid + "] in index, all attributes are modified correctly!");
				}else{
					isPass = false;
					logger.error("find pid [" + pid + "] in index, but attributes are not modified correctly!");
				}
			}
		}
		
		if(isPass){
			logger.info(String.format(" - [LOG_SUCCESS] - normal modify method was succeed - pid %s ", pid));
		}else
			logger.error(String.format(" - [LOG_FAILED] - normal modify method was failed - pid %s", pid));
	}
	
	@Test(enabled = true, groups = "p2")
	public void ForceIndexModify() throws MalformedURLException, DocumentException {
		boolean isPass = true;
		boolean addSuccess = false;
		boolean modifySuccess = false;
		
		// 随机造一个不存在的pid
		Random random = new Random();
		int randomPID = random.nextInt(Integer.MAX_VALUE);
		
		// 初始字段
		String pid = Integer.toString(randomPID);
		String product_name = "normal_add_into_index";
		String display_status = "1";
		String num_images = "3";
		String stock_status = "0";
		String exclusive_end_date = "2015-12-12 12:00:00";
		
		// 修改字段
		String modified_display_status = "0";
		String modified_num_images = "10";
		String modified_stock_status = "1";
		String modified_end_date = "2016-05-15 12:00:00";
		String modified_product_name = "modified_product_name";
		
		// 获取指定模块的fulltm和incnum
		Map<String, String> FulltmAndIncNum = new HashMap<String, String>();
		
		// 确定单品在索引中不存在
		List<Node> PidNode = URLBuilder.porductSearch(pid, false);		
		
		// 新增一个品到索引中，然后修改
		if(PidNode.isEmpty()){	
			// 新增
			ProductID = pid;			
			Map<String, String> paramMap = new HashMap<String, String>();
			paramMap.put("product_id", pid);
			paramMap.put("product_name", product_name);			
			paramMap.put("display_status", display_status);
			paramMap.put("num_images", num_images);
			paramMap.put("stock_status", stock_status);
			paramMap.put("exclusive_end_date", exclusive_end_date);
			paramMap.put("_index_add", "1");
			FulltmAndIncNum = IndexDataHandler.GetFulltmAndIncNum("searcher");
			paramMap.putAll(FulltmAndIncNum);
			
			String url = URLBuilder.buildUrl(paramMap);
			url = url.replaceAll(" ", "%20");
			String ret = SearchRequester.get(url);
			if(ret.contains("OK")){
				addSuccess = true;
				logger.info("add pid [" + pid + "] into index successfully");
			}else
				logger.error("add pid [" + pid + "] into index failed!");
			
			// 确认新增成功
			if(addSuccess){
				List<Node> newPidNode = URLBuilder.porductSearch(pid, false);
				if(newPidNode.isEmpty())
					logger.error("did not find pid [" + pid + "] in index!");
			}
			
			// 修改						
			Map<String, String> paramModified = new HashMap<String, String>();
			paramModified.put("product_id", pid);
			paramModified.put("_modify_display_status", modified_display_status);
			paramModified.put("_modify_num_images", modified_num_images);
			paramModified.put("_modify_stock_status", modified_stock_status);
			paramModified.put("_modify_exclusive_end_date", modified_end_date);
			paramModified.put("_modify_product_name", modified_product_name);
			paramModified.put("_index_modify", "1");
			paramModified.put("_force_update", "1");
			FulltmAndIncNum = IndexDataHandler.GetFulltmAndIncNum("searcher");
			paramModified.putAll(FulltmAndIncNum);
			
			String modifiedUrl = URLBuilder.buildUrl(paramModified);
			modifiedUrl = modifiedUrl.replaceAll(" ", "%20");
			String modifiedRet = SearchRequester.get(modifiedUrl);
			if(modifiedRet.contains("OK")){
				modifySuccess = true;
				logger.info("modify pid [" + pid + "] successfully");
			}else
				logger.error("modify pid [" + pid + "] failed!");
			
		}else{
			// TODO: optimize
			ForceIndexModify();
			return;
		}
		
		// 验证
		if(modifySuccess){
			List<Node> modifiedPidNode = URLBuilder.porductSearch(pid, false);
			if(modifiedPidNode.isEmpty()){
				logger.error("did not find pid [" + pid + "] in index!");
			}else{
				String newPid = XMLParser.product_id(modifiedPidNode.get(0));
				String newDisplayStatus = XMLParser.product_displayStatus(modifiedPidNode.get(0));
				String newNumImages = XMLParser.product_numImage(modifiedPidNode.get(0));
				String newEndDate =   XMLParser.product_exclusive_end_date(modifiedPidNode.get(0));
				String newProductName =   XMLParser.product_name(modifiedPidNode.get(0));				
								
				if(newPid.equals(pid) && 
						newDisplayStatus.equals(modified_display_status) &&
						newNumImages.equals(modified_num_images) && 
						newEndDate.equals(modified_end_date) &&
						newProductName.equals(modified_product_name)){
					logger.info("find pid [" + pid + "] in index, all attributes are modified correctly!");
				}else{
					isPass = false;
					logger.error("find pid [" + pid + "] in index, but attributes are not modified correctly!");
				}
			}
		}
		
		if(isPass){
			logger.info(String.format(" - [LOG_SUCCESS] - normal modify method was succeed- pid %s ", pid));
		}else
			logger.error(String.format(" - [LOG_FAILED] - normal modify method was failed - pid %s", pid));
	}

}
