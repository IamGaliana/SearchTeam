# -*- coding: UTF-8 -*-
__author__ = 'xiyucheng'


import unittest
from ddt import ddt, data
import HTMLTestRunner
from function.send_email import *
from function.ad_calc_func import *
from function.excel_func import *
import time


query_list = []
tables = excel_table_byindex('keyword_for_nbook.xlsx')
for row in tables:
    query_list.append(row["keyword"].encode("utf-8"))

#query_list = ['衬衫','短裤']


@ddt
class ad_calc_search(unittest.TestCase):
    def setUp(self):
        self.URL_OLD = "http://10.255.254.62:8080/getAds/cpc/0/0/100/%s/184537119/0/0/0/107169205/%s/-/0/0/0/debug"
        self.URL_NEW = "http://10.255.254.62:8080/getAds/cpc/0/0/100/%s/184537119/0/0/0/107169205/%s/-/0/0/0/debug"
        pass
    @data(*query_list)
    def test_case(self, query):
        version = '1'
        old_url = self.URL_OLD % (urllib2.quote(query), version)
        new_url = self.URL_NEW % (urllib2.quote(query), version)

        old_result = run_for_search_category(old_url)[0]    #字典，旧版本的所有数据，包含ad_id，DebugAdInfo，debug_info，bid_ctr，score，search_type
        new_result = run_for_search_category(new_url)[0]    #字典，新版本的所有数据，包含ad_id，DebugAdInfo，debug_info，bid_ctr，score，search_type

        old_search_type_list = []   #存有旧版本所有广告的search_type的信息list。
        new_search_type_list = []   #存有新版本所有广告的search_type的信息list。
        for i in range(0, len(old_result)):
            old_search_type_list.append(old_result[i]['search_type'])
        for i in range(0, len(new_result)):
            new_search_type_list.append(old_result[i]['search_type'])

        old_result_search_type_0 = data_filter(old_result, "search_type", "0")  #老版本过滤了search_type=1的数据。 也就是精确匹配的数据
        new_result_search_type_0 = data_filter(new_result, "search_type", "0")  #新版本过滤了search_type=1的数据。 也就是精确匹配的数据

        old_result_search_type_1 = data_filter(old_result, "search_type", "1")  #老版本过滤了search_type=0的数据。 也就是扩展匹配的数据
        new_result_search_type_1 = data_filter(new_result, "search_type", "1")  #新版本过滤了search_type=0的数据。 也就是扩展匹配的数据

        old_list_jingque = get_ad_id_set_list_by_bidctr(old_result_search_type_0)   #老版本精确匹配的数据的ad_id存储的set
        new_list_jingque = get_ad_id_set_list_by_bidctr(new_result_search_type_0)   #新版本精确匹配的数据的ad_id存储的set
        old_list_kuozhan = get_ad_id_set_list_by_score(old_result_search_type_1)    #老版本扩展匹配的数据ad_id存储的set
        new_list_kuozhan = get_ad_id_set_list_by_score(new_result_search_type_1)    #新版本扩展匹配的数据的ad_id存储的set

        print " "
        print u'老环境请求地址：', old_url.decode('utf-8')
        print u'老环境请求地址：', new_url.decode('utf-8')
        print u'测试的计算模块版本为：', version
        print "======================"
        print u'测试的query为：', query.decode('utf-8')
        DebugQueryPath_old = run_for_search_category(old_url)[1]
        DebugQueryPath_new = run_for_search_category(new_url)[1]
        print u"老版本的DebugQueryPath为:", DebugQueryPath_old
        print u"新版本的DebugQueryPath为:", DebugQueryPath_new
        if DebugQueryPath_old.startswith('58')&DebugQueryPath_new.startswith('58'):

            if len(old_result) == 0:
                raise u"没有广告返回"
            elif len(old_result) != len(new_result):
                print u'老产品返回广告长度:', len(old_result)
                print u'新产品返回广告长度:', len(new_result)
                self.fail(u"广告返回长度不一致")
            print u"老版本返回广告长度", len(old_result)
            print u"新版本返回广告长度", len(new_result)

            self.assertEqual(old_search_type_list, new_search_type_list, msg = u"精确匹配和扩展匹配的排序不同。")  #由于非图书预测要分为精确和非精确分别对比。 所以该验证点是为了验证整块的精确匹配和非精确匹配的数据块排序不同。

            for i in range(0, len(new_list_jingque)-1):
                print i
                print "old_list:", old_list_jingque[i]
                print "new_list", new_list_jingque[i]
                self.assertEqual(old_list_jingque[i], new_list_jingque[i], msg=u"精确匹配错误")
                print "========================"
            for i in range(0, len(new_list_kuozhan)-1):
                print i
                print "old_list:", old_list_kuozhan[i]
                print "new_list", new_list_kuozhan[i]
                self.assertEqual(old_list_kuozhan[i], new_list_kuozhan[i], msg=u"扩展匹配错误")
                print "========================"
        else:
            raise u"该qurey预测为非百货"

    def tearDown(self):
        pass

if __name__ == "__main__":
    test_suite = unittest.TestSuite()
    test_suite.addTests(unittest.makeSuite(ad_calc_search))
    title = time.strftime('%Y-%m-%d_%H.%M.%S_',time.localtime(time.time()))
    test_report = "D:\\TDD_Report\\"+title+"ad_calc_search_nbook_compare.html"
    print test_report
    fp = file(test_report, 'wb')
    runner = HTMLTestRunner.HTMLTestRunner(
        stream=fp,
        title=u'搜索页计算模块--百货query新老产品版本结果比对',
        description=u'针对所有预测为百货的query，对比新老产品的同一版本的结果是否一致，'
                    u'其中，search_type=0的精确匹配按照bid+str排序进行比对的，search_type=1的扩展匹配按照score排序进行对比的。'
    )
    runner.run(test_suite)
    subject = runner.title
    file_list = [test_report]
    fp.close()
    #send_mail(subject, files=file_list)


