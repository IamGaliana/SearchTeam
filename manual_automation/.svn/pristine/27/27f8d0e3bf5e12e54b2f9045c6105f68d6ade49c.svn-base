package com.dangdang.verifier.search_ranking;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.slf4j.LoggerFactory;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;

import com.dangdang.client.SearchRequester;
import com.dangdang.client.URLBuilder;
import com.dangdang.util.AssertTools;
import com.dangdang.util.ProdIterator;
import com.dangdang.util.XMLParser;
/**
 * 说明：无库存降权策略
 * @author gaoyanjun
 * @version 创建时间：2015/05/11 16:35 
 * 
 */
public class NoStockDropWeightVerifier {

	public final static org.slf4j.Logger logger = LoggerFactory.getLogger(NoStockDropWeightVerifier.class);
		
	/**
	 * 
	 * @param iterator 	结果集
	 * @param shopid	预期的店铺id
	 * @param query		query词
	 * @param vp		验证点
	 * @return			如果结果集中所有单品的shopid和预期shopid一致，则pass，否则fail
	 */
	public boolean Verifier(ProdIterator iterator, Map<String, String> map){	
		boolean fail = false;
		Node node1 = null;
		Node node2 = null;
		boolean isFirstNoStock = true;
		
		while(iterator.hasNext()){			
			int position = iterator.getPoint();
			if(position == -1){
				node1 = iterator.next();
				node2 = iterator.next();
			}else{
				node1 = node2;
				node2 = iterator.next();
			}
							
			String productid1 = XMLParser.product_id(node1);
			String productid2 = XMLParser.product_id(node2);
			
			String stockstatus1 = XMLParser.product_StockStatus(node1);
			String stockstatus2 = XMLParser.product_StockStatus(node2);
			
			String is_ebook1 = XMLParser.prodSpecifiedAttrib(node1, "is_ebook");
			String pre_sale1 = XMLParser.prodSpecifiedAttrib(node1, "pre_sale");
			
			// 1.电子书忽略，2.预售书忽略，3.第一个无库存忽略
			if(!productid1.equals("0") && !productid2.equals("0")){
				if(stockstatus1.equals("0") && stockstatus2.equals("1")){
					if(is_ebook1.equals("1") || pre_sale1.equals("1")){
						logger.info(String.format("- function [NoStockDropWeight] - product [%s] is ebook or presale: is_ebook '[%s]', pre_sale '[%s]'", productid1, is_ebook1, pre_sale1));
					}else if(isFirstNoStock){
						logger.info(String.format("- function [NoStockDropWeight] - the 1st time is acceptable, stock status of product [%s] is '0', stock status of product [%s] is '1',"
								+ " [%s] is in front of [%s]", productid1, productid2, productid1, productid2));
						isFirstNoStock = false;
					}else {
						fail = true;
						logger.error(String.format("- function [NoStockDropWeight] - error: the 2nd time is not acceptable, stock status of product [%s] is '0', stock status of product [%s] is '1',"
								+ "but [%s] is in front of [%s]", productid1, productid2, productid1, productid2));
						break;
					}
					
				}
			}
		}
		// 比较分数		
//		while(old_iterator.hasNext() & new_iterator.hasNext()){
//			Node old_node = old_iterator.next();
//			String old_productId = XMLParser.product_id(old_node);
//			Integer beforeScore = Integer.parseInt(XMLParser.product_scope(old_node));			
//			
//			Node new_node = new_iterator.next();
//			String new_productId = XMLParser.product_id(new_node);
//			Integer afterScore = Integer.parseInt(XMLParser.product_scope(new_node));
//			
//			if (new_productId.equals(old_productId)){
//				// 降权，商业因素分减掉5分
//				if(AssertTools.BusinessScore(afterScore)  != AssertTools.BusinessScore(beforeScore) - 5){					
//					logger.error("query -["+ query +"], Score of product [" + new_productId + "] was not set to right value: "
//							+ "old score is [" +beforeScore +"], new score is ["+ afterScore +"]");
//					fail = true;
//					unmatchedCount ++;
//				} 
//			}else{
//				logger.error("query -["+ query +"], sorting sequence is changed, old_pid [" + old_productId + "], new_pid [" + new_productId + "]");
//				fail = true;
//				unmatchedCount ++;
//			}
//		}	
		

		
		if (fail){ 
			logger.error(String.format(" - [LOG_FAILED] - verify function [NoStockDropWeight], query - [%s]", map.get("query").toString()));
			return false;
		}
		else {
			logger.info(String.format(" - [LOG_SUCCESS] - verify function [NoStockDropWeight], query - [%s]", map.get("query").toString()));
			return true;
		} 
	}	
}
