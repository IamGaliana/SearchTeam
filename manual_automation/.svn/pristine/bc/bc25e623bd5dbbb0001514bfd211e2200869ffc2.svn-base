package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.slf4j.LoggerFactory;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * 说明： 百货类商品时效性加权策略，百货类商品&上架时间在一个月内
 * &召回结果的pid包含在文件http://10.4.32.86:9030/timeless_data/pid_time_pro.txt中
 * &query词必须有分类反馈（key_cate_rate中能查到）
 * 满足以上条件的商品才加权
 * 开关参数是 timelessSwitch = 1
 * @author gaoyanjun
 * 
 */
public class TimelessAddWeightScheduler {
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(TimelessAddWeightScheduler.class);
	@BeforeMethod 
	public void setup() {  	
	}  

	@AfterMethod 
	public void clearup() { 
	}   
	
	/**
	 * 时效性加权策略
	 */
	@Test(enabled=true)  
	public void TimelessAddWeightTest() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.info(Long.toString(d));
			TestLauncher tl = new TestLauncher();
			tl.start("id >=178255 and id <= 178301", "fvp_id=45", true);
			// tl.start("category_path like '58.65%'", "fvp_id=45", false);
			long d2 = System.currentTimeMillis();
			logger.info("总耗时："+(d2-d)/1000.0+"秒");
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	}	
}
