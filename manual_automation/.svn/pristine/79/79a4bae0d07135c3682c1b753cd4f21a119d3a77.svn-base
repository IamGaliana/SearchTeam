package com.dangdang.verifier.producttop;

/**
 * 单品置顶验证类
 */
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.slf4j.LoggerFactory;
import org.testng.Assert;

import com.dangdang.client.SearchRequester;
import com.dangdang.client.URLBuilder;
import com.dangdang.util.XMLParser;
import com.dangdang.verifier.scenario.ScenarioSearchVerifier;

public class ProductTopVerify{
	
	public final static org.slf4j.Logger logger = LoggerFactory.getLogger(ProductTopVerify.class);
	
	/*
	 * pid_list_categoty_feedback 存储的是通过query得到的xml文件中的商品id
	 */
	public static String getPidFromXml(Map<String,String> map) throws Exception{
		
		Map<String,String> urlMap = new HashMap<String,String>();
		urlMap.put("st", "full");
		urlMap.put("um", "search_ranking");
		urlMap.put("ps", "60");
		urlMap.put("pg", "1");
		urlMap.put("_new_tpl", "1");
		urlMap.put("q", URLEncoder.encode(map.get("query"), "GBK"));
		String url = URLBuilder.buildURL(urlMap);
		String xml = SearchRequester.get(url);
		Document doc = XMLParser.read(xml);
		List<String> pid_list=new ArrayList<String> ();
		pid_list=XMLParser.getPidList(doc);
		System.out.println("pid_list"+pid_list);
		return pid_list.get(0);
	}
	
	/*
	 * add by dongxiaobing
	 * 得到是否有货的标志位
	 */
	public static boolean getStockStatus(Map<String,String> map) throws Exception{
		String test_product_id=map.get("product_id");
		Map<String,String> urlMap = new HashMap<String,String>();
		urlMap.put("product_id", test_product_id);
		String url = URLBuilder.buildURL(urlMap);
		String xml = SearchRequester.get(url);
		Document doc = XMLParser.read(xml);
		
		String stock_status=XMLParser.product_StockStatus_dxb(doc);
		
		System.out.println("###############"+stock_status);
		
		//0表示缺货
		if("0".equals(stock_status)){
			return true;
		}
		return false;
		
		
	}
	
	public static boolean verify(Map<String,String> map) throws Exception{
		
		//得到测试数据库中需要置顶的产品id
		String test_product_id=map.get("product_id");
		System.out.println("需要置顶的pid为:"+test_product_id);
		
		//得到后台返回xml中的第一个产品节点的pid
		String xml_product_id=getPidFromXml(map);
		//比较前六个pid是否都相等，去除第一个（推荐商品）
		if(getStockStatus(map)==true){
			System.out.println("该pid缺货："+test_product_id);
			return false;
		}
		if(test_product_id.equals(xml_product_id)){
			return true;
		}else{
			return false;
		}
	}
	
}
	
