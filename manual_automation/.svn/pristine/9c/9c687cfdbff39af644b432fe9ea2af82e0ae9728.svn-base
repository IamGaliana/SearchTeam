package com.dangdang;

import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.slf4j.LoggerFactory;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.dangdang.client.SearchRequester;
import com.dangdang.client.URLBuilder;
import com.dangdang.util.Calculator;
import com.dangdang.util.Utils;

/**
 * @author gaoyanjun@dangdang.com
 * @version 
 */
public class IndexDelRecoverScheduler {
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(IndexDelRecoverScheduler.class);

	// 获取一批待删除的pid
	private  static List<String> pids = IndexDataHandler.PidList();
	
	@BeforeMethod
	public void setup() {
	}

	@AfterMethod
	public void clearup() {
	}

	
	@Test(enabled = true, groups = "p2")
	public void NormalIndexDeleteAndRecover() throws MalformedURLException, DocumentException {
		long d1 = System.currentTimeMillis() ;
		String subject = "【搜索后台自动化测试】基础功能回归测试结果";
		StringBuffer content = new StringBuffer();
		content.append("<html><head><meta http-equiv=Content-Type content='text/html; charset=utf-8'></head><body><table border=1 cellspacing=0 cellpadding=0><tr><th>功能模块</th><th>通过query</th><th>失败query</th><th>跳过query</th><th>总计</th><th>耗时</th></tr>");
		
		// 增加脚本低通过率预警邮件内容，modified by 高彦君 @ 205/06/04 
		String warnSubject = "【搜索后台自动化测试】预警！脚本通过率低";
		StringBuffer warnContent = new StringBuffer();
		warnContent.append("<html><head><meta http-equiv=Content-Type content='text/html; charset=utf-8'></head><body><table border=1 cellspacing=0 cellpadding=0><tr><th>功能模块</th><th>通过query</th><th>失败query</th><th>跳过query</th><th>总计</th><th>实际通过率</th><th>预期通过率</th></tr>");
		boolean doSendWarnMail = false;
		
		// 先删除
		int deletedNum = 0;
		int deleteFailNum = 0;		
		boolean isDelete = true;		
		Map<String, String> delMap = new HashMap<String, String>(); // API接口：http://10.255.254.71:8390/_index_del=1&_full_timestamp=1436263525&_inc_num=134570&product_id=61040406
		delMap.put("_index_del", "1");
		
		// 针对每个pid进行删除操作，并记录状态
		for(String pid: pids){
			delMap.putAll(IndexDataHandler.GetFulltmAndIncNum("searcher"));
			delMap.put("product_id", pid);
			String url = URLBuilder.buildURL(delMap);
			String ret = SearchRequester.get(url);
			
			if (ret.contains("OK")){
				logger.info("delete request returns OK， pid [" + pid + "]");
			}else{
				logger.error("delete request returns [" + ret +"]， pid [" + pid + "]");
			}
			
			// 验证： 再次查找，如果查不到，说明删除成功
			List<Node> pidNode = URLBuilder.porductSearch(pid, false);
			if(pidNode.isEmpty()){
				deletedNum ++;
				logger.info("delete pid [" + pid + "] successfully!");	
			}else{
				isDelete = false;
				deleteFailNum ++;
				logger.error("delete pid [" + pid + "] failed!");				
			}
		}
		
		logger.info(String.format(" - [LOG_SUMMARY] - vp: %s, passed: %s, failed: %s, skiped: %s", 
				"NormalIndex - Delete", deletedNum, deleteFailNum, 0));
		long d2 = System.currentTimeMillis();
		String d3 = Math.ceil((d2-d1)/60000.0)+"分钟";
		int total = deletedNum + deleteFailNum;
		content.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", 
				"NormalIndex - Delete", deletedNum, deleteFailNum, 0, ((Integer)(total)).toString(), d3));
		
		// 增加脚本低通过率预警邮件内容，计算实际通过率，与fvp.minpassrate比较后决定是否发送邮件，modified by 高彦君 @ 205/06/04 
		double actualPassrate = Calculator.passrate(deletedNum,total);
		double expectedPassrate = 90.0;
		// 如果通过率比预期的低，发送邮件
		if(actualPassrate < expectedPassrate){
			warnContent.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", 
					"NormalIndex - Delete", deletedNum, deleteFailNum, 0, 
					((Integer)(total)).toString(), actualPassrate + "%", expectedPassrate + "%"));
			doSendWarnMail = true;
		}
		
		// 恢复		
		if(isDelete){
			long d4 = System.currentTimeMillis() ;
			int recoveredNum = 0;
			int recoverFailNum = 0;
			boolean isRecovered = true;
			logger.info(String.format(" - [LOG_SUCCESS] - normal delete method was succeed， start to recover data"));			
			
			// 如果删除成功，再验证恢复接口，否则删除失败，无法验证恢复功能
			Map<String, String> recoverMap = new HashMap<String, String>();
			recoverMap.put("_index_recover", "1");
			
			// 针对每个pid进行删除操作，并记录状态
			for(String pid: pids){
				recoverMap.putAll(IndexDataHandler.GetFulltmAndIncNum("searcher"));
				recoverMap.put("product_id", pid);
				String url = URLBuilder.buildURL(recoverMap);
				String ret = SearchRequester.get(url);
				
				if (ret.contains("OK")){
					logger.info("recover request returns OK， pid [" + pid + "]");
				}else{
					logger.error("recover request returns [" + ret +"]， pid [" + pid + "]");
				}
				
				// 验证： 再次查找，如果查不到，说明恢复失败
				List<Node> pidNode = URLBuilder.porductSearch(pid, false);
				if(!pidNode.isEmpty()){
					recoveredNum ++;
					logger.info("recover pid [" + pid + "] successfully!");	
				}else{
					recoverFailNum ++;
					isRecovered = false;
					logger.error("recover pid [" + pid + "] failed!");				
				}
			}
			
			logger.info(String.format(" - [LOG_SUMMARY] - vp: %s, passed: %s, failed: %s, skiped: %s", 
					"NormalIndex - Recover", recoveredNum, recoverFailNum, 0));
			long d5 = System.currentTimeMillis();
			String d6 = Math.ceil((d5-d4)/60000.0)+"分钟";
			int total2 = recoveredNum + recoverFailNum;
			content.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", 
					"NormalIndex - Recover", recoveredNum, recoverFailNum, 0, ((Integer)(total)).toString(), d6));
			
			// 增加脚本低通过率预警邮件内容，计算实际通过率，与fvp.minpassrate比较后决定是否发送邮件，modified by 高彦君 @ 205/06/04 
			double actualPassrate2 = Calculator.passrate(recoveredNum,total2);
			double expectedPassrate2 = 90.0;
			// 如果通过率比预期的低，发送邮件
			if(actualPassrate < expectedPassrate){
				warnContent.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", 
						"NormalIndex - Recover", recoveredNum, recoverFailNum, 0, 
						((Integer)(total2)).toString(), actualPassrate2 + "%", expectedPassrate2 + "%"));
				doSendWarnMail = true;
			}
			
			if(isRecovered){
				logger.info(String.format(" - [LOG_SUCCESS] - normal recover method was succeed"));
			}else{
				logger.error(String.format(" - [LOG_FAILED] - normal recover method was failed"));
			}
			
		}else{
			logger.error(String.format(" - [LOG_FAILED] - normal delete method was failed, recover method has not been executed yet"));
		}		
		
		content.append("</table></body></html>");
		Utils.sendMail(subject, content.toString(), "HTML");
		
		// 增加脚本低通过率预警邮件内容，modified by 高彦君 @ 205/06/04
		if (doSendWarnMail){
			warnContent.append("</table></body></html>");
			Utils.sendWarningMail(warnSubject, warnContent.toString(), "HTML");
		}
	}
}
