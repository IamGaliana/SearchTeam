package com.dangdang.verifier.search_ranking;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.LoggerFactory;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;

import com.dangdang.client.SearchRequester;
import com.dangdang.client.URLBuilder;
import com.dangdang.util.AssertTools;
import com.dangdang.util.ProdIterator;
import com.dangdang.util.XMLParser;
/**
 * 说明：无库存降权策略
 * @author gaoyanjun
 * @version 创建时间：2015/05/11 16:35 
 * 
 */
public class MobileExclusiveAddWeightVerifier {

	public final static org.slf4j.Logger logger = LoggerFactory.getLogger(MobileExclusiveAddWeightVerifier.class);
		
	/**
	 * 无线端手机专享价加权策略
	 * @param old_iterator
	 * @param new_iterator
	 * @param query
	 * @param vps
	 * @return
	 */
	public boolean Verifier(ProdIterator old_iterator,ProdIterator new_iterator,String query, String vps){	
		boolean fail = false;
		int unmatchedCount = 0;
		// 比较分数		
		while(old_iterator.hasNext() & new_iterator.hasNext()){
			Node old_node = old_iterator.next();
			String old_productId = XMLParser.product_id(old_node);
			Integer beforeScore = Integer.parseInt(XMLParser.product_scope(old_node));			
			
			Node new_node = new_iterator.next();
			String new_productId = XMLParser.product_id(new_node);
			Integer afterScore = Integer.parseInt(XMLParser.product_scope(new_node));
			
			if (new_productId.equals(old_productId)){
				// 降权，商业因素分加上10分
				if(AssertTools.BusinessScore(afterScore)  != AssertTools.BusinessScore(beforeScore) + 10){					
					logger.error("query -["+ query +"], Score of product [" + new_productId + "] was not set to right value: "
							+ "old score is [" +beforeScore +"], new score is ["+ afterScore +"]");
					fail = true;
					unmatchedCount ++;
				} 
			}else{
				logger.error("query -["+ query +"], sorting sequence is changed, old_pid [" + old_productId + "], new_pid [" + new_productId + "]");
				fail = true;
				unmatchedCount ++;
			}
		}	
		
		if (fail){ 
			logger.error(" - [LOG_FAILED] - verify function ["+ vps +"], query - [" + query+ "]"
					+ "- unMatched product count is [" + unmatchedCount +"]");
			return false;
		}
		else {
			logger.info(" - [LOG_PASS] - verify function ["+ vps +"], query - [" + query + "]");
			return true;
		} 
	}	
}
