#encoding:utf8

#import unittest
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, NoAlertPresentException
from conf.pages_elements import *
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import random

class BaseFunc(object):


    def __init__(self, browser_type='Firefox'):
        if browser_type in ['IE', 'ie', 'Ie']:
            self.driver = webdriver.IE()
        elif browser_type in ['Chrome', 'CHROME', 'chrome']:
            self.driver = webdriver.Chrome()
        elif browser_type in ['Firefox', 'FIREFOX', 'FireFox', 'firefox']:
            self.driver = webdriver.Firefox()
            #self.driver = webdriver.Remote(desired_capabilities=DesiredCapabilities.FIREFOX)
        self.driver.implicitly_wait(10)

    def wait_for_element_load(self, element, timeout=30):
        element = element.split("->")
        if element[0] in ['id', 'ID', 'Id']:
            locator = (By.ID, element[-1])
        elif element[0] in ['xpath', 'XPATH', 'Xpath']:
            locator = (By.XPATH, element[-1])
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located(locator)
                )
        except Exception, e:
            print element, "Element not found"
        return element

    def is_element_present(self, element):
        element = element.split("->")
        try:
            self.driver.find_element(by=element[0], value=element[-1])
        except NoSuchElementException, e:
            return False
        return True

    def goto(self, url):
        try:
            goto = self.driver.get(url)
        except Exception, urlnotreached:
            print "url not reached"
        return goto

    def switch_to_frame(self, frame_name):
        self.driver.switch_to.frame(frame_name)

    def switch_back(self):
        self.driver.switch_to.default_content()

    def click(self, element):
        element = self.wait_for_element_load(element)
        self.driver.find_element(by=element[0], value=element[-1]).click()

    def clear(self, element):
        element = self.wait_for_element_load(element)
        self.driver.find_element(by=element[0], value=element[-1]).clear()

    def send_keys(self, element, key):
        element = self.wait_for_element_load(element)
        self.driver.find_element(by=element[0], value=element[-1]).clear()
        self.driver.find_element(by=element[0], value=element[-1]).send_keys(key)

    def get_attribute(self, element, name):
        element = self.wait_for_element_load(element)
        return self.driver.find_element(by=element[0], value=element[-1]).get_attribute(name)

    #执行javascript将时间控件对应的input只读属性去除后输入相应的时间
    def remove_readonly(self, element):
        element = self.wait_for_element_load(element)
        self.driver.find_element(by=element[0], value=element[-1])
        self.driver.execute_script("var setDate=document.getElementById(\'"+element[-1]+"\');setDate.removeAttribute('readonly');")

    def text(self, element):
        element = self.wait_for_element_load(element)
        return self.driver.find_element(by=element[0], value=element[-1]).text

    def get_table_column_num(self, element):
        if '->' in element:
            element = element.split("->")
        else:
            element = element
        th_element = self.driver.find_elements(by=element[0], value=element[-1]+str('/.//tr[0]/td'))
        column_count = 0
        for i in th_element:
            if not u'display: none' in i.get_attribute('style'):
                column_count += 1
        return column_count

    def get_table_row_num(self, element):
        if '->' in element:
            element = element.split("->")
        else:
            element = element
        tr_element = self.driver.find_elements(by=element[0], value=element[-1]+str('/tbody/tr'))
        return len(tr_element)


    def get_list_column_num(self, element):
        if '->' in element:
            element = element.split("->")
        else:
            element = element
        li_element = self.driver.find_elements(by=element[0], value=element[-1]+str('/ul[1]/li'))
        column_count = 0
        for i in li_element:
            if i.text:
                column_count += 1
        return column_count

    def get_list_row_num(self, element):
        if '->' in element:
            element = element.split("->")
        else:
            element = element
        ul_element = self.driver.find_elements(by=element[0], value=element[-1]+str('/.//ul'))
        return len(ul_element)

    def quit(self):
        self.driver.quit()

    def submit(self, element):
        element = self.wait_for_element_load(element)
        self.driver.find_element(by=element[0], value=element[-1]).click()

    #以列表嵌套方式返回页面中列表中的行数据，默认列表共7列，返回当前页面所有行,通过index取对应的行
    #element格式参考："xpath->.//*[@id='form_ads']"
    def list_row_content(self, element):
        element = self.wait_for_element_load(element)
        column_num = self.get_list_column_num(element)
        if column_num == 0:
            raise "列表中没有数据"
        row = []
        all_rows = []
        count = 0
        all_li = self.driver.find_elements(by=element[0], value=element[-1]+str('/.//li'))
        try:
            for i in all_li:
                if i.text:
                    row.append(i.text)
                    count += 1
                if count % column_num == 0 and row:
                    all_rows.append(row)
                    row = []
        except Exception,e:
            print "无法取到列表中数据"
        return all_rows

    #以列表嵌套方式返回页面中列表中的列数据，默认列表共7列，共10行，返回所有列，通过index取对应列
    #element格式参考："xpath->.//*[@id='form_ads']"
    def list_column_content(self, element):
        all_column = []
        all_rows = self.list_row_content(element)
        try:
            all_column = [[r[col] for r in all_rows] for col in range(len(all_rows[0]))]
        except Exception, e:
            print "无法取到表格数据"
        return all_column

    #以列表嵌套方式返回页面中table中的行数据，默认列数为12列（有些列隐藏了，其对应text为空，在这里过滤了）
    #返回当前页面所有行，通过index取对应列,"xpath->//table[@class='table']"
    def table_row_content(self, element):
        element = self.wait_for_element_load(element)
        column_num = self.get_table_column_num(element)
        row = []
        all_rows = []
        count = 0
        all_li = self.driver.find_elements(by=element[0], value=element[-1]+str('/.//td'))
        try:
            for i in all_li:
                if i.text:
                    row.append(i.text)
                    count += 1
                if count % column_num == 0 and row:
                    all_rows.append(row)
                    row = []
        except Exception, e:
            print "无法取到表格数据"
        return all_rows

    #以列表嵌套方式返回页面中表格的列数据，默认列表共12列，共15行，返回所有列，通过index取对应列
    #element格式参考："xpath->//table[@class='table']"
    def table_column_content(self, element):
        all_column = []
        all_rows = self.table_row_content(element)
        try:
            all_column = [[r[col] for r in all_rows] for col in range(len(all_rows[0]))]
        except Exception, e:
            print "无法取到表格数据"
        return all_column

    #示例：action.select("xpath->.//*[@id='pos_id']/option", u"回头客推广位")
    # def select(self, element, choice):
    #     element = self.wait_for_element_load(element)
    #     all_options = self.driver.find_elements(by=element[0], value=element[-1])
    #     chosen = None
    #     for i in xrange(len(all_options)):
    #         if choice == all_options[i].text:
    #             chosen = i
    #     try:
    #         all_options[chosen].click()
    #     except Exception, e:
    #         print "没有该选项"

    def select(self, element, choice):
        element = self.wait_for_element_load(element)
        all_options = self.driver.find_elements(by=element[0], value=element[-1])
        chosen = None
        for i in xrange(len(all_options)):
            if choice == all_options[i].text:
                chosen = i
            elif choice == i:
                chosen = i
        try:
            all_options[chosen].click()
        except Exception, e:
            print "没有该选项"

    def get_checkbox(self):
        try:
            checkbox = self.driver.find_elements_by_css_selector('input[type=checkbox]')
        except Exception,e:
            print "该页面没有checkbox"
        return checkbox

    #//li//a[text()='推广'] example:action.click_a_in_list("xpath->//li//a", "推广")
    def get_a_in_list(self, element, choice):
        element = self.wait_for_element_load(element)
        all_a = self.driver.find_elements(by=element[0], value=element[-1]+str('[text()="%s"]' %choice))
        return all_a
        #random.choice(all_a).click()

    def get_text_from_alert(self):
        try:
            alert = self.driver.switch_to_alert()
        except Exception,e:
            print "没有弹出窗口"
        return alert.text

    def get_page_number(self, element):
        pass










