package com.dangdang.util;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
 
/**
 * 时间转化工具 date转为时间戳 时间戳转date 互相与String的转换
 * 所有出现的String time 格式都必须为(yyyy-MM-dd HH:mm:ss)，否则出错
 * @author 
 * 
 */
public class DateTimeHandler {
 
	static SimpleDateFormat sdf = new SimpleDateFormat("YYYY-mm-dd HH:mm:ss"); 
    /**
     * String(yyyy-MM-dd HH:mm:ss) 转 Date
     * 
     * @param time
     * @return
     * @throws ParseException
     */
    // String date = "2010/05/04 12:34:23";
    public static Date StringToDate(String time) throws ParseException {         
        Date date = new Date();
        // 注意format的格式要与日期String的格式相匹配
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            date = dateFormat.parse(time);
            //System.out.println(date.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
 
        return date;
    }
 
    /**
     * Date转为String(yyyy-MM-dd HH:mm:ss)
     * 
     * @param time
     * @return
     */
    public static String DateToString(Date time) {
        String dateStr = "";
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            dateStr = dateFormat.format(time);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dateStr;
    }
    
    /**
     * String(yyyy-MM-dd HH:mm:ss)转10位时间戳
     * @param time
     * @return
     */
    public static Integer StringToTimestamp(String time){    
        int times = 0;
        try {  
            times = (int) ((Timestamp.valueOf(time).getTime())/1000);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }
        if(times==0){
            System.out.println("String转10位时间戳失败");
        }
        return times; 
         
    }
    
    /**
     * 10位int型的时间戳转换为String(yyyy-MM-dd HH:mm:ss)
     * @param time
     * @return
     */
    public static String timestampToString(Integer time){
        //int转long时，先进行转型再进行计算，否则会是计算结束后在转型
        long temp = (long)time*1000;
        Timestamp ts = new Timestamp(temp);  
        String tsStr = "";  
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
        try {  
            //方法一  
            tsStr = dateFormat.format(ts);  
            System.out.println(tsStr);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }
        return tsStr;  
    }
    
    /**
     * 10位时间戳转Date
     * @param time
     * @return
     */
    public static Date TimestampToDate(Integer time){
        long temp = (long)time*1000;
        Timestamp ts = new Timestamp(temp);  
        Date date = new Date();  
        try {  
            date = ts;  
            //System.out.println(date);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return date;
    }
    
    /**
     * Date类型转换为10位时间戳
     * @param time
     * @return
     */
    public static Integer DateToTimestamp(Date time){
        Timestamp ts = new Timestamp(time.getTime());
         
        return (int) ((ts.getTime())/1000);
    }

    /**
     * 在指定日期上增或减指定天数
     * @param date		指定日期
     * @param addition	指定天数（可正可负）
     * @return			增、减指定天数后的日期
     */
    public static Date AddorSubtractDays(Date date, int day){
    	Date newDate = new Date();
    	Calendar c = Calendar.getInstance();
    	c.setTime(date);
    	c.add(Calendar.DATE, day);
    	newDate = c.getTime();
    	return newDate;
    }
    
    /**
     * 在指定日期上增或减指定月
     * @param date		指定日期
     * @param addition	指定天数（可正可负）
     * @return			增、减指定天数后的日期
     */
    public static Date AddorSubtractMonths(Date date, int month){
    	Date newDate = new Date();
    	Calendar c = Calendar.getInstance();
    	c.setTime(date);
    	c.add(Calendar.MONTH, month);
    	newDate = c.getTime();
    	return newDate;
    }
    
    /**
     * 比较两个时间的大小，d1>d2，返回1，d2>d1，返回2，如果相等，返回0
     * @param d1	时间date1
     * @param d2	时间date2
     * @return		int类型的结果
     */
    public static int CompareDate(String d1, String d2){
    	int a = 0 ;
    	try{
    		Date date1 = sdf.parse(d1);
    		Date date2 = sdf.parse(d2);
    		if (date1.getTime() > date2.getTime())
    			a = 1;
    		else if(date1.getTime() < date2.getTime())
    			a = 2;
    		else
    			a = 0;
    	} catch(Exception e){
    		e.printStackTrace();
    	}
    	return a;
    }
    
    /**
     * 产生固定时间段里面的随机日期
     * @param beginDate	开始时间
     * @param endDate	结束时间
     * @return			开始、结束范围内的随机时间
     */
    public static Date RandomDate(String beginDate,String endDate ){ 
    	try{ 
    		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    		Date start = format.parse(beginDate);//构造开始日期  
	    	Date end = format.parse(endDate);//构造结束日期  
	    	//getTime()表示返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。
	    	if(start.getTime() >= end.getTime()){  
	    		return new Date(); 
	    	}  
	    	
	    	long date = random(start.getTime(),end.getTime());  	
	    		return new Date(date);  	
	    }catch (Exception e) {  
	    	e.printStackTrace(); 
    	}  
    	return new Date(); 
    }  
    
    private static long random(long begin,long end){
    	long rtn = begin + (long)(Math.random() * (end - begin));  
    	//如果返回的是开始时间和结束时间，则递归调用本函数查找随机值  
    	if(rtn == begin || rtn == end){  
    		return random(begin,end);  
    	}  
    	return rtn;  
    } 
    
    /**
     * 测试用
     * @param args
     */
    public static void main(String [] args){
        System.out.println(StringToTimestamp("2011-05-09 11:49:45"));
        System.out.println(DateToTimestamp(TimestampToDate(StringToTimestamp("2011-05-09 11:49:45"))));
        System.out.println(CompareDate("2011-05-09 11:30:05","2011-06-09 10:02:03"));
        
    }
 
}