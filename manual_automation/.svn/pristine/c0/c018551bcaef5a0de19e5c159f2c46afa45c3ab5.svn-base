package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class CommonScheduler {
	private static Logger logger = Logger.getLogger(CommonScheduler.class);
	{  		
		PropertyConfigurator.configure("conf/common_log4j.properties");
	}
	@BeforeMethod 
	public void setup() {  	
	}  

	@AfterMethod 
	public void clearup() { 
	}   
	 
	//翻页->
	@Test(enabled=true,groups="p1")  
	public void turn_page() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);	
			TestLauncher tl = new TestLauncher();
			tl.start("id < 726", "fvp_id in (16)");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	}

	//排序、过滤组合->
	@Test(enabled=false)  
	public void group() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);	
			TestLauncher tl = new TestLauncher();
			tl.start("id < 720", "fvp_id in (0)");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	}
	
	
	
}
