package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class FilterSearchScheduler {
	private static Logger logger = Logger.getLogger(FilterSearchScheduler.class);
	{  		
		PropertyConfigurator.configure("conf/filter_log4j.properties");
	}
	@BeforeMethod 
	public void setup() {  	
	}  

	@AfterMethod 
	public void clearup() { 
	}   
	
	//过滤->
	@Test(enabled=true)  
	public void filter_1() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id = 6");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_2() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id =8");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_3() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id =9");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_4() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=10");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_5() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id =11");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_6() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=12");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_7() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id =13");//品牌过滤
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_8() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=14");//材质过滤
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	
	
	@Test(enabled=true)  
	public void filter_9() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=15");//分类过滤
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	@Test(enabled=true)  
	public void filter_10() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=18");
			long d2 = System.currentTimeMillis();
			logger.fatal((d2-d)/1000.0);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	} 
	//PC手机专享价
	@Test(enabled=true)  
	public void filter_11() { 
		try{
			long d = System.currentTimeMillis();
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=22");
			long d2 = System.currentTimeMillis();
			logger.fatal("总耗时："+(d2-d)/1000.0+"秒");
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	}
	//无线
	@Test(enabled=true)  
	public void filter_12() { 
		try{
			long d = System.currentTimeMillis() ;
			logger.fatal(d);
			TestLauncher tl = new TestLauncher();
			tl.start("id < 20", "fvp_id=23");
			long d2 = System.currentTimeMillis();
			logger.fatal("总耗时："+(d2-d)/1000.0+"秒");
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
		} finally {	
		}
	}
	
	
//	/*
//	 * 测试稳定性
//	 */
//	@Test(enabled=true)  
//	public void search_ranking() { 
//		try{
//			long d = System.currentTimeMillis() ;
//			logger.fatal(d);
//			TestLauncher tl = new TestLauncher();
//			tl.start("id < 727", "fvp_id=22");
//			long d2 = System.currentTimeMillis();
//			logger.fatal("总耗时："+(d2-d)/1000.0+"秒");
//		} catch (Exception e) {
//			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
//			e.printStackTrace(new PrintStream(baos));  
//			String exception = baos.toString();  
//			logger.error(" - [LOG_EXCEPTION] - "+exception);
//			e.printStackTrace();
//		} finally {	
//		}
//	}
	
	
	
	
	
	
	
	
	
	
}
