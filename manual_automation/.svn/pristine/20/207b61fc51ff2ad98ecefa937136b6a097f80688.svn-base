package com.dangdang;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.LoggerFactory;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.dangdang.client.DBAction;
import com.dangdang.client.URLBuilder;
import com.dangdang.data.BlackListQuery;
import com.dangdang.data.FuncQuery;
import com.dangdang.data.FuncVP;
import com.dangdang.util.Calculator;
import com.dangdang.util.ProdIterator;
import com.dangdang.util.Utils;
import com.dangdang.verifier.blacklist.ListRankingBlackListVerifier;
import com.dangdang.verifier.cateforecast.CategoryDirectBlacklistVerifier;
import com.dangdang.verifier.cateforecast.CategoryFeedbackFilterVerifier;
import com.dangdang.verifier.sort.specifiedpool.SpecifiedPoolAddWeightVerifier;

public class SpecifiedPoolAddWeightScheduler {
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(SpecifiedPoolAddWeightScheduler.class);
	@BeforeMethod 
	public void setup() {  		
	}  

	@AfterMethod 
	public void clearup() { 
	}   
	
	//搜索页指定商品池&品牌&店铺排序加权
	@Test(enabled=true)  
	public void SpecifiedPoolAddWeight()  { 
		long d = System.currentTimeMillis();
		DBAction dba = new DBAction();
		dba.setFuncCondition("verify_point = 'specified_pool'"); 
		dba.setFvpCondition("fvp_id = 35");
		List<FuncQuery> querys = dba.getFuncQuery();
		List<FuncVP> fvps = dba.getFVP();
		
		String subject = "【搜索后台自动化测试】基础功能回归测试结果";
		StringBuffer content = new StringBuffer();
		content.append("<html><head><meta http-equiv=Content-Type content='text/html; charset=utf-8'></head><body><table border=1 cellspacing=0 cellpadding=0><tr><th>功能模块</th><th>通过category</th><th>失败category</th><th>跳过category</th><th>总计</th><th>耗时</th></tr>");
		
		String warnSubject = "【搜索后台自动化测试】预警！脚本通过率低";
		StringBuffer warnContent = new StringBuffer();
		warnContent.append("<html><head><meta http-equiv=Content-Type content='text/html; charset=utf-8'></head><body><table border=1 cellspacing=0 cellpadding=0><tr><th>功能模块</th><th>通过query</th><th>失败query</th><th>跳过query</th><th>总计</th><th>实际通过率</th><th>预期通过率</th></tr>");
		boolean doSendWarnMail = false;
		
		for (FuncVP fvp : fvps) {
			int passed = 0, failed = 0, skiped = 0;
			for (FuncQuery query : querys) {
				int rt = doQuery(query, fvp);
				switch (rt) {
				case 0:
					passed += 1;
					break;
				case -1:
					failed += 1;
					break;
				case -2:
					skiped += 1;
					break;

				default:
					failed += 1;
					break;
				}
			}
			logger.debug(String.format(" - [LOG_SUMMARY] - vp: %s, passed: %s, failed: %s, skiped: %s", fvp.getFvpname(), passed, failed, skiped));
			long d2 = System.currentTimeMillis();
			int d4 = (int) ((d2 - d) / 60000 + 1);
			logger.info("总耗时:" + d4 + "分钟");
			String d3 = String.valueOf(d4) + "分钟";
			content.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", fvp.getFvpname(), passed, failed, skiped,
					passed + failed + skiped, d3));
			
			double actualPassrate = Calculator.passrate(passed,passed+failed+skiped);
			double expectedPassrate = fvp.getMinPassrate();
			if(actualPassrate < expectedPassrate){
				warnContent.append(String.format("<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>", 
						fvp.getFvpname(), passed, failed, skiped, passed+failed+skiped, actualPassrate + "%" , expectedPassrate + "%"));
				doSendWarnMail = true;
			}	
		}
		content.append("</table></body></html>");
		Utils.sendMail(subject, content.toString(), "HTML");
		
		if (doSendWarnMail){
			warnContent.append("</table></body></html>");
			Utils.sendWarningMail(warnSubject, warnContent.toString(), "HTML");
		}
	}
	
	private int doQuery(FuncQuery query, FuncVP fvp){		
		boolean result = true;
		boolean isSkip = false;
		Map<String, String> o_urlp = new HashMap<String, String>();     // 带了原query词的map
		Map<String, String> n_urlp = new HashMap<String, String>();		// 替换了新query词的map
		ProdIterator oldquery_iterator = null;							// 原词结果集
		ProdIterator newquery_iterator = null;				
		
		//String oldUrl = "http://10.255.254.71:8390/";		
		o_urlp = URLBuilder.converURLPars("", query.getFquery(), null); 	//e.g.http://10.255.254.71:8390/?q=test&st=full&um=search_ranking&pg=1&ps=60&_new_tpl=1&_mod_ver=S8&newparam=value？
		oldquery_iterator = new ProdIterator(o_urlp);
		
		n_urlp = URLBuilder.converURLPars(fvp.getFvp(), query.getFquery(), null);				//e.g.http://10.255.254.71:8390/?q=test&st=full&um=search_ranking&pg=1&ps=60&_new_tpl=1
		newquery_iterator = new ProdIterator(n_urlp);
				
		
		if (newquery_iterator.getTotalCount()<1 || oldquery_iterator.getTotalCount()<1) {
			logger.info(String.format(" - [LOG_SKIP] - no result: Query: %s", query.getFquery()));
			isSkip = true;			
		}
		
		SpecifiedPoolAddWeightVerifier specifiedVerifier = new SpecifiedPoolAddWeightVerifier();
		result = specifiedVerifier.Verifier(oldquery_iterator,newquery_iterator, query);
		
		if (isSkip)
			return -2;
		
		if (result)
			return 0;
		else
			return -1;	
			
	}

}
