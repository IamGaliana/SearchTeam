package com.dangdang.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.LoggerFactory;

import com.dangdang.data.SourceItem;

public class FileUtil {
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(FileUtil.class);
	
	private File file;
	private File failedfile;
	private File successfile;
	private File untestedfile;
	private File termFixedFile;
	private File fullFixedFile;
	/**
	 * 文件处理工具类；用来打开文件输入/输出流；初始化搜索项文件reader
	 */
	public FileUtil() {
		try {
			Config config = new Config();
			String filePath = config.get_itemFile();
			this.failedfile = new File(config.get_failedFile());
			if (!this.failedfile.exists()) {
				this.failedfile.createNewFile();
			}
			this.successfile = new File(config.get_successFile());
			if (!this.successfile.exists()) {

				this.successfile.createNewFile();
			}

			this.untestedfile = new File(config.get_untestFile());
			if (!this.untestedfile.exists()) {
				this.untestedfile.createNewFile();
			}

			this.termFixedFile = new File(config.get_termFixFile());
			if (!this.termFixedFile.exists()) {
				this.termFixedFile.createNewFile();
			}

			this.fullFixedFile = new File(config.get_fullFixFile());
			if (!this.fullFixedFile.exists()) {
				this.fullFixedFile.createNewFile();
			}
			this.file = new File(filePath);
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
		}
	}

	public List<SourceItem> initSourceItem() {
		try {
			List<SourceItem> list = new ArrayList<SourceItem>();
			FileInputStream in = new FileInputStream(file);
			BufferedReader bf = new BufferedReader(new InputStreamReader(in));
			String line;
			while ((line = bf.readLine()) != null) {
				logger.debug(" - [FileUtil] - 读取内容：" + line);
				String[] terms = line.split("\t");
				SourceItem item = new SourceItem(terms[0], terms[1], terms[2]);
				list.add(item);
			}
			bf.close();
			in.close();
			return list;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			e.printStackTrace();
			return null;
		}
	}

	public BufferedWriter failedOutput() {
		try {
			FileOutputStream out = new FileOutputStream(failedfile, true);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					out));
			return writer;
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			return null;
		}
	}

	public BufferedWriter successOutput() {
		try {
			FileOutputStream out = new FileOutputStream(successfile, true);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					out));
			return writer;
		} catch (Exception e) {
			return null;
		}
	}

	public BufferedWriter untestOutput() {
		try {
			FileOutputStream out = new FileOutputStream(untestedfile, true);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					out));
			return writer;
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			return null;
		}
	}

	public BufferedWriter termFixOnlyOutput() {
		try {
			FileOutputStream out = new FileOutputStream(termFixedFile, true);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					out));
			return writer;
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			return null;
		}
	}

	public BufferedWriter fullfixedOutput() {
		try {
			FileOutputStream out = new FileOutputStream(fullFixedFile, true);
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					out));
			return writer;
		} catch (Exception e) {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			e.printStackTrace(new PrintStream(baos));  
			String exception = baos.toString();  
			logger.error(" - [LOG_EXCEPTION] - "+exception);
			return null;
		}
	}

	/**
	 * 读取指定网络位置的文件，并写入到output.txt中，返回该文件
	 * @param strUrl
	 * @return
	 * @throws IOException
	 */
	public static String getRemoteFile(String strUrl) throws IOException { 
		String fileName = "output.txt";
		URL url = new URL(strUrl); 
		HttpURLConnection conn = (HttpURLConnection) url.openConnection(); 
		DataInputStream input = new DataInputStream(conn.getInputStream()); 
		DataOutputStream output = new DataOutputStream(new FileOutputStream(fileName)); 
		byte[] buffer = new byte[1024 * 8]; 
		int count = 0; 
		while ((count = input.read(buffer)) > 0) { 
		output.write(buffer, 0, count); 
		} 
		output.close(); 
		input.close(); 
		return fileName; 
	}
	
	/**
	 * 读取filePath给定的文件，把第一列数据写入lists列表返回
	 * @param filePath
	 * @return
	 */
	 public static List<String> readTxtFile(String filePath){
		 List<String> lists = new ArrayList<String>();
	     try {	    	
	    	 String encoding="GBK";
             File file=new File(filePath);
             if(file.isFile() && file.exists()){ //判断文件是否存在
            	 InputStreamReader read = new InputStreamReader(new FileInputStream(file),encoding);//考虑到编码格式
	             BufferedReader bufferedReader = new BufferedReader(read);
	             String lineTxt = null;
	             while((lineTxt = bufferedReader.readLine()) != null){
	            	 lists.add(lineTxt.split("\\t")[0]);
	             }
                 read.close();
	         }else{
	        	 System.out.println("找不到指定的文件");
	        	 }
             } catch (Exception e) {
            	 System.out.println("读取文件内容出错");
            	 e.printStackTrace();
             }
	     return lists;
	 }
}
